#!/usr/bin/env ruby
$: << File.join( File.dirname( __FILE__ ), '..', 'lib' )
require 'mechazilla'

options = {
            :url_pattern  => nil,
            :text_pattern => nil,
            :output_dir   => nil,
            :prefix       => nil,
            :sleep_secs   => nil,
            :dry_run      => false,
            :debug        => false,
            :quiet        => false,
            :user_agent   => 'Linux Mozilla',
            :urls         => []
          }

optparse = OptionParser.new do |opts|
        opts.banner = "Usage: mechazilla [OPTIONS] OUTPUT_DIR url1 [url2] [...]"

        opts.on '-h', '--help', 'Display Help Page' do
          puts opts
          exit
        end

        opts.on '-v', '--version', 'Display Version' do
          puts MechaZilla::VERSION
          exit
        end

        opts.on '-u', '--url-pattern [URL_PATTERN]', Regexp, 'Specify the REGEX pattern for links HREFs' do |regex|
          options[:url_pattern] = regex
        end

        opts.on '-t', '--text-pattern [TEXT_PATTERN]', Regexp, 'Specify the REGEX pattern for link text' do |regex|
          options[:text_pattern] = regex
        end

        opts.on '-s', '--sleep [SLEEP_SECS]', Integer, 'Specify the number of seconds to sleep between downloads for throttling.' do |secs|
          options[:sleep_secs] = (secs > 0) ? secs : nil
        end

        opts.on '-p', '--prefix [PREFIX]', 'Specify the prefix to prepend to all files saved.' do |prefix|
          options[:prefix] = prefix
        end

        opts.on '-a', '--user-agent [USER_AGENT]', 'Specify the user agent string. Must be a valid WWW::Mechanize user agent string.' do |ua|
          options[:user_agent] = ua
        end

        opts.on '-n', '--dry-run', "Print out what URLs would be downloaded and where they'd save, but doesn't download." do |dry|
          options[:dry_run] = dry
        end

        opts.on '-d', '--debug', 'Run in debug mode with stack traces.' do
          options[:debug] = true
        end

        opts.on '-q', '--quiet', 'Run in quiet mode (no output).' do
          options[:quiet] = true
        end
end

optparse.parse!

options[:output_dir] = ARGV.shift
options[:urls] = ARGV

$stdout.sync = true # Seems to be fewer problems this way.
begin
  dl = MechaZilla::Downloader.new options
  dl.download
rescue Exception => e
  warn "Error encountered: #{e.message}#{" #{e.backtrace.join("\n")}" if options[:debug]}" unless options[:quiet]
  exit 1
end

exit 0
